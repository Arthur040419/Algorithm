package algorithm;

//343.整数拆分
public class LeetCode343 {
    public int integerBreak(int n) {
        /**
         * 思路：
         * 1.定义dp数组，dp[i]表示拆分数字i的乘积最大值
         * 2.定义状态转移方程，这里有点复杂
         * 对于一个数字i，它都有多种拆分情况，比如拆分成1+(i-1),2+(i-2)....
         * 因此我们需要考虑到所有的拆分情况，并且对于每一种拆分情况，它们的乘积都分为两种情况：
         * 一种是就拆分未两个数字进行乘积，比如1+(i-1)就是1*(i-1)
         * 另一种就是在拆分的情况下继续拆分，比如1+(i-1)就是(i-1)还要继续拆分，所以这种情况的最大乘积为1*dp[i-1]，因为dp[i-1]就表示拆分i-1的最大乘积
         * 由此可以推导出dp[i]的状态转移方程：dp[i]=Max(j*(i-j),j*dp[i-j],dp[i])
         * 这里j就是代表上面多种拆分情况中的左边的值，然后之所以还要比较dp[i]是因为i的拆分有多种拆分情况，每一种拆分情况dp[i]都在不断更新
         * 3.初始化dp数组，初始化dp[2]为1
         * 4.确定遍历顺序，由于dp[i]要依赖于dp[i-j]，因此遍历顺序为从前往后遍历
         *
         */

        //定义dp数组
        int[] dp = new int[n + 1];

        //初始化dp数组
        dp[2] = 1;

        //遍历dp数组
        for (int i = 3; i <= n; i++) {
            //这里之所以是i-1，是为了保证拆分后右边的数一定大于等于2
            for (int j = 1; j < i - 1; j++) {
                dp[i] = Math.max(Math.max(j * dp[i - j], j * (i - j)), dp[i]);
            }
        }

        return dp[n];

    }
}
